package com.menny.android.anysoftkeyboard.BiAffect.Database.Models;

import android.arch.persistence.room.Entity;
import android.arch.persistence.room.PrimaryKey;

import io.reactivex.annotations.NonNull;

//@Entity annotates that this class is a table schema and each data member declared in this class corresponds to a table column
@Entity
public class DeviceData {

    //Id is an autogenerated primary key. It keeps track of number of rows in the table
    @PrimaryKey(autoGenerate = true)
    public int Id;

    // SDK version and release info
    @NonNull
    public String androidVersion;

    /*
    * The logical density of the display. This is a scaling factor for the Density Independent Pixel unit,
    * one DIP is one pixel on an approximately 160 dpi screen (for example a 240x320, 1.5"x2" screen),
    * provides the baseline of the system's display.
    * Thus on a 160dpi screen this density value will be 1; on a 120 dpi screen it would be .75; etc.
      This value does not exactly follow the real screen size (as given by xdpi and ydpi,
      rather is used to scale the size of the overall UI in steps based on gross changes in the display dpi.
      For example, a 240x320 screen will have a density of 1 even if its width is 1.8", 1.3", etc.
      However, if the screen resolution is increased to 320x480 but the screen size remained 1.5"x2" then the density would be increased (probably to 1.5).
    * */
    @NonNull
    public float pixelDensityLogical;

    // The screen density expressed as dots-per-inch.
    @NonNull
    public int pixelDensityDpi;

    // The absolute width of the available display size in pixels.
    @NonNull
    public int deviceWidthPixel;

    // The absolute height of the available display size in pixels.
    @NonNull
    public int deviceHeightPixel;

    // phone manufacturer information
    @NonNull
    public String manufacturer;

    // model information
    @NonNull
    public String phoneModel;

    public DeviceData(){
        //Default constructor
        // as all data members are public no need for getter and setter methods.
        // each data member defined in an @Entity class must be either public or have a getter method
    }
}
